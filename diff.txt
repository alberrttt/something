diff --git a/crates/something-ast/src/declaration/function/mod.rs b/crates/something-ast/src/declaration/function/mod.rs
index 8376f21..55d6582 100644
--- a/crates/something-ast/src/declaration/function/mod.rs
+++ b/crates/something-ast/src/declaration/function/mod.rs
@@ -3,7 +3,7 @@ use std::fmt::Display;
 use something_dev_tools::ParseTokensDisplay;
 use something_frontend_tokenizer::{list::List, Parse};
 
-use crate::{attribute::Attribute, expression::block::Block};
+use crate::{attribute::Attribute, expression::block::Block, punctuated::Punctuated};
 
 use self::return_type::ReturnType;
 use super::super::prelude::*;
@@ -13,7 +13,7 @@ pub struct FunctionDeclaration {
     // pub modifiers: Option<Attribute>,
     pub fn_token: tokens::Fn,
     pub name: Ident,
-    pub params: Parentheses<List<(Ident, Ident)>>,
+    pub params: Parentheses<Punctuated<(Ident, Ident), Comma>>,
     pub body: Block,
     pub return_type: ReturnType,
 }
@@ -31,7 +31,7 @@ impl Display for FunctionDeclaration {
             self.params
                 .iter()
                 .enumerate()
-                .map(|(i, name)| { format!("{}: {},", name.0, name.1) })
+                .map(|(i, (name, _))| { format!("{}: {},", name.0, name.1) })
                 .collect::<String>()
         )?;
         write!(f, "{}", self.return_type)?;
diff --git a/crates/something-ast/src/declaration/mod.rs b/crates/something-ast/src/declaration/mod.rs
index 15a769a..49a5261 100644
--- a/crates/something-ast/src/declaration/mod.rs
+++ b/crates/something-ast/src/declaration/mod.rs
@@ -10,6 +10,7 @@ pub enum Declaration {
     Function(FunctionDeclaration),
     Var(VariableDeclaration),
 }
+
 impl std::fmt::Debug for Declaration {
     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
         match self {
diff --git a/crates/something-ast/src/declaration/var.rs b/crates/something-ast/src/declaration/var.rs
index 7785024..c5ff6d4 100644
--- a/crates/something-ast/src/declaration/var.rs
+++ b/crates/something-ast/src/declaration/var.rs
@@ -72,6 +72,6 @@ item_name!(VariableDeclaration, "variable declaration");
 
 #[test]
 pub fn type_annotation() {
-    let var_decl: VariableDeclaration = crate::ast!("let a: i32 = 1;");
+    let (var_decl, _): (VariableDeclaration, _) = crate::ast!("let a: i32 = 1;");
     dbg!(var_decl);
 }
diff --git a/crates/something-ast/src/lib.rs b/crates/something-ast/src/lib.rs
index e0b362e..c0e3c0d 100644
--- a/crates/something-ast/src/lib.rs
+++ b/crates/something-ast/src/lib.rs
@@ -56,7 +56,7 @@ impl From<&str> for Ast {
 
 #[macro_export]
 macro_rules! ast {
-    ($str: tt) => {{
+    ($str: expr) => {{
         use something_frontend_tokenizer::Parse;
         let mut tokens = something_frontend_tokenizer::Tokens::from($str);
         match (&mut tokens).parse() {
diff --git a/crates/something-ast/src/punctuated.rs b/crates/something-ast/src/punctuated.rs
index a691368..d87383a 100644
--- a/crates/something-ast/src/punctuated.rs
+++ b/crates/something-ast/src/punctuated.rs
@@ -1,11 +1,17 @@
-use std::fmt::Display;
+use std::{fmt::Display, ops::Deref};
 
 use something_frontend_tokenizer::{Parse, ParsingDisplay, Tokens};
 
 // prolly need better error handling soon
 #[derive(Debug, Clone)]
 pub struct Punctuated<T, P>(pub Vec<(T, Option<P>)>);
+impl<T, P> Deref for Punctuated<T, P> {
+    type Target = Vec<(T, Option<P>)>;
 
+    fn deref(&self) -> &Self::Target {
+        &self.0
+    }
+}
 impl<T, P> ParsingDisplay for Punctuated<T, P>
 where
     T: ParsingDisplay,
diff --git a/crates/something-frontend-tokenizer/src/lib.rs b/crates/something-frontend-tokenizer/src/lib.rs
index 6f144d3..9d1907f 100644
--- a/crates/something-frontend-tokenizer/src/lib.rs
+++ b/crates/something-frontend-tokenizer/src/lib.rs
@@ -1,4 +1,8 @@
-use std::{error::Error, fmt::Display, ops::Index};
+use std::{
+    error::Error,
+    fmt::Display,
+    ops::{Deref, Index},
+};
 #[derive(Debug)]
 pub struct Tokenizer<'a> {
     input: &'a str,
@@ -18,6 +22,13 @@ use tokens::*;
 pub use traits::{Parse, ParsingDisplay};
 #[derive(Debug, Clone)]
 pub struct Tokens(pub Vec<Token>, pub usize);
+impl Deref for Tokens {
+    type Target = Vec<Token>;
+
+    fn deref(&self) -> &Self::Target {
+        &self.0
+    }
+}
 impl Index<usize> for Tokens {
     type Output = Token;
 
diff --git a/crates/something-frontend-tokenizer/src/to_string.rs b/crates/something-frontend-tokenizer/src/to_string.rs
index 66bf151..fcca162 100644
--- a/crates/something-frontend-tokenizer/src/to_string.rs
+++ b/crates/something-frontend-tokenizer/src/to_string.rs
@@ -1,10 +1,12 @@
 use crate::Tokens;
-
+pub trait ToSourceString {
+    fn to_source_string(&self) -> String;
+}
 impl Tokens {
     pub fn to_source_string(&self) -> String {
-        let mut s = String::new();
-        let iter = self.0.iter().peekable();
-        let mut tokens = self.0.iter().peekable();
+        let mut result = String::new();
+        let iter = self.iter().peekable();
+        let mut tokens = self.iter().peekable();
         for token in iter {
             tokens.next();
             let offset = match tokens.peek() {
@@ -12,9 +14,9 @@ impl Tokens {
                 None => 0,
             };
             let whitespace = " ".repeat(offset);
-            s.push_str(format!("{token}{whitespace}").as_str());
+            result.push_str(format!("{token}{whitespace}").as_str());
         }
-        s
+        result
     }
 }
 #[test]
diff --git a/crates/something-typechecker/src/context.rs b/crates/something-typechecker/src/context.rs
index bc6ec92..b3309bc 100644
--- a/crates/something-typechecker/src/context.rs
+++ b/crates/something-typechecker/src/context.rs
@@ -8,6 +8,9 @@ pub struct BlockCtx {
     pub parent: Option<Rc<BlockCtx>>,
 }
 impl BlockCtx {
+    pub fn set(&mut self, name: Ident, ty: Type) {
+        self.vars.insert(name, ty);
+    }
     pub fn get_var(&self, name: &Ident) -> Option<&Type> {
         self.vars.get(name)
     }
diff --git a/crates/something-typechecker/src/error.rs b/crates/something-typechecker/src/error.rs
index bf91789..f6b800e 100644
--- a/crates/something-typechecker/src/error.rs
+++ b/crates/something-typechecker/src/error.rs
@@ -3,7 +3,14 @@ use std::fmt::Display;
 use crate::prelude::Type;
 #[derive(Debug, Clone)]
 pub enum TypeError {
-    MismatchedTypes { expected: Type, found: Type },
+    MismatchedTypes {
+        expected: Type,
+        found: Type,
+    },
+    IncorrectTypeName {
+        expected: &'static str,
+        found: String,
+    },
 }
 impl TypeError {
     pub fn mismatched(expected: Type, found: Type) -> Self {
@@ -26,6 +33,16 @@ impl Display for TypeError {
                     found.to_string().yellow()
                 )
             }
+            IncorrectTypeName { expected, found } => {
+                write!(
+                    f,
+                    "{} {} {} {}",
+                    "Expected".red().bold(),
+                    expected.yellow(),
+                    "but found".red().bold(),
+                    found.yellow()
+                )
+            }
         }
     }
 }
diff --git a/crates/something-typechecker/src/impls/mod.rs b/crates/something-typechecker/src/impls/mod.rs
index 1f42b13..f229dce 100644
--- a/crates/something-typechecker/src/impls/mod.rs
+++ b/crates/something-typechecker/src/impls/mod.rs
@@ -1,3 +1,39 @@
+use crate::prelude::TypeCheck;
+
+mod fn_decl;
 mod to_type;
 mod typecheck;
 mod var;
+
+use crate::prelude::*;
+impl TypeCheck<&mut BlockCtx, ()> for Node {
+    fn type_check(&self, ctx: &mut BlockCtx) {
+        match self {
+            Self::Declaration(declaration) => declaration.type_check(ctx),
+            Self::Statement(statement) => statement.type_check(ctx),
+        }
+    }
+}
+impl TypeCheck<&mut BlockCtx, ()> for Statement {
+    fn type_check(&self, with: &mut BlockCtx) {
+        match self {
+            Statement::Expression(expr, _) => expr.type_check(&*with),
+            Statement::Return(_, _, _) => todo!(),
+        }
+    }
+}
+impl TypeCheck<&mut BlockCtx, ()> for Declaration {
+    fn type_check(&self, with: &mut BlockCtx) {
+        match self {
+            Declaration::Function(_) => todo!(),
+            Declaration::Var(var) => match var.type_check(with) {
+                Ok(ok) => {}
+                Err(err) => {
+                    println!("{}", err);
+                    println!("node: {var:?}");
+                    panic!();
+                }
+            },
+        }
+    }
+}
diff --git a/crates/something-typechecker/src/impls/to_type.rs b/crates/something-typechecker/src/impls/to_type.rs
index 4948cd6..766617b 100644
--- a/crates/something-typechecker/src/impls/to_type.rs
+++ b/crates/something-typechecker/src/impls/to_type.rs
@@ -39,6 +39,14 @@ impl TypeCheck<&BlockCtx, Type> for Expression {
         }
     }
 }
+impl TypeCheck<&BlockCtx, ()> for Expression {
+    fn type_check(&self, with: &BlockCtx) {
+        match self {
+            Expression::Ident(ident) => ident.type_check(with),
+            _ => Expression::type_check(self, ()),
+        };
+    }
+}
 impl TypeCheck<(), Type> for Literal {
     fn type_check(&self, with: ()) -> Type {
         use lit_impl::Inner::*;
@@ -73,14 +81,17 @@ impl TypeCheck<(), Type> for Binary {
     }
 }
 
-impl TypeCheck<(), Type> for Ident {
-    fn type_check(&self, with: ()) -> Type {
+impl TypeCheck<(), Result<Type, TypeError>> for Ident {
+    fn type_check(&self, with: ()) -> Result<Type, TypeError> {
         match self.name.as_str() {
-            "number" => Type::number(),
-            "string" => Type::string(),
-            "bool" => Type::boolean(),
-            "function" => Type::function(),
-            str => panic!("unexpected `{str}`"),
+            "number" => Ok(Type::number()),
+            "string" => Ok(Type::string()),
+            "bool" => Ok(Type::boolean()),
+            "function" => Ok(Type::function()),
+            str => Err(TypeError::IncorrectTypeName {
+                expected: "number, string, bool, function",
+                found: str.to_string(),
+            }),
         }
     }
 }
diff --git a/crates/something-typechecker/src/impls/var.rs b/crates/something-typechecker/src/impls/var.rs
index a61f28c..4131c92 100644
--- a/crates/something-typechecker/src/impls/var.rs
+++ b/crates/something-typechecker/src/impls/var.rs
@@ -15,7 +15,7 @@ impl<'a> TypeCheck<&'a mut BlockCtx> for VariableDeclaration {
 fn annotated(ctx: &mut BlockCtx, var_decl: &VariableDeclaration) -> Result<(), TypeError> {
     let type_annotation = {
         let (_, type_annotation) = var_decl.type_annotation.as_ref().unwrap();
-        type_annotation.type_check(())
+        type_annotation.type_check(()).unwrap()
     };
 
     let ty = var_decl.value.type_check(&*ctx);
@@ -24,7 +24,6 @@ fn annotated(ctx: &mut BlockCtx, var_decl: &VariableDeclaration) -> Result<(), T
     }
     let name = var_decl.name.clone();
     ctx.vars.insert(name, ty);
-    dbg!(&ctx.vars);
     Ok(())
 }
 
@@ -34,7 +33,6 @@ fn unannotated(ctx: &mut BlockCtx, var_decl: &VariableDeclaration) -> Result<(),
     let ty = var_decl.value.type_check(&*ctx);
     let name = var_decl.name.clone();
     ctx.vars.insert(name, ty);
-    dbg!(&ctx.vars);
     Ok(())
 }
 
